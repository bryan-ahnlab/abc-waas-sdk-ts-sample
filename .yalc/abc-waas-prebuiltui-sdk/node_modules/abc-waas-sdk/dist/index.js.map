{"version":3,"sources":["../src/context/AbcWaasContext.ts","../src/context/AbcWaasProvider.tsx","../src/hooks/useAbcWaas.ts","../src/utilities/common.ts","../src/api/secureChannel.ts","../src/api/v2/auth.ts","../src/api/v2/member.ts","../src/api/v2/wallet.ts","../src/hooks/useSnsLogin.ts"],"names":["createContext","useState","jsx","useContext","qs","bytesToHex","hexToBytes","p256","mCache","CryptoJS","useCallback","email","token","service","secureChannel","basicToken","error"],"mappings":"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","file":"index.js","sourcesContent":["// src/context/AbcWaasContext.ts\n\nimport { createContext } from \"react\";\nimport type { AbcWaasConfig } from \"@/types/config\";\n\nexport interface AbcWaasContextType {\n  config: AbcWaasConfig;\n\n  basicToken: string | null;\n  setBasicToken: (basicToken: string | null) => void;\n\n  email: string | null;\n  setEmail: (email: string | null) => void;\n  token: string | null;\n  setToken: (token: string | null) => void;\n  service: string | null;\n  setService: (service: string | null) => void;\n\n  abcAuth: any;\n  setAbcAuth: (abcAuth: any) => void;\n  abcWallet: any;\n  setAbcWallet: (abcWallet: any) => void;\n  abcUser: any;\n  setAbcUser: (abcUser: any) => void;\n  secureChannel: any;\n  setSecureChannel: (secureChannel: any) => void;\n}\n\nexport const AbcWaasContext = createContext<AbcWaasContextType | null>(null);\n","// src/context/AbcWaasProvider.tsx\n\nimport React, { useState } from \"react\";\nimport { AbcWaasContext } from \"@/context/AbcWaasContext\";\nimport type { AbcWaasConfig } from \"@/types/config\";\n\ninterface Props {\n  config: AbcWaasConfig;\n  children: React.ReactNode;\n}\n\nexport const AbcWaasProvider = ({ config, children }: Props) => {\n  const [basicToken, setBasicToken] = useState<string | null>(null);\n\n  const [email, setEmail] = useState<string | null>(null);\n  const [token, setToken] = useState<string | null>(null);\n  const [service, setService] = useState<string | null>(null);\n\n  const [abcAuth, setAbcAuth] = useState<any>(null);\n  const [abcWallet, setAbcWallet] = useState<any>(null);\n  const [abcUser, setAbcUser] = useState<any>(null);\n  const [secureChannel, setSecureChannel] = useState<any>(null);\n\n  return (\n    <AbcWaasContext.Provider\n      value={{\n        config,\n\n        basicToken,\n        setBasicToken,\n\n        email,\n        setEmail,\n        token,\n        setToken,\n        service,\n        setService,\n\n        abcAuth,\n        setAbcAuth,\n        abcWallet,\n        setAbcWallet,\n        abcUser,\n        setAbcUser,\n        secureChannel,\n        setSecureChannel,\n      }}\n    >\n      {children}\n    </AbcWaasContext.Provider>\n  );\n};\n","// src/hooks/useAbcWaas.ts\n\nimport { useContext } from \"react\";\nimport { AbcWaasContext } from \"@/context/AbcWaasContext\";\n\nexport function useAbcWaas() {\n  const context = useContext(AbcWaasContext);\n\n  if (!context) {\n    throw new Error(\"Must be used inside AbcWaasProvider\");\n  }\n\n  return context;\n}\n","export async function safeParseJson(\n  res: Response,\n  label: string = \"API Error\"\n) {\n  const text = await res.text();\n\n  try {\n    const data = JSON.parse(text);\n    if (!res.ok) {\n      throw new Error(`[${label}] ${JSON.stringify(data, null, 2)}`);\n    }\n    return data;\n  } catch (err) {\n    throw new Error(`[${label}] ${text}`);\n  }\n}\n","// src/api/secureChannel.ts\n\nimport { p256 } from \"@noble/curves/p256\";\nimport { bytesToHex, hexToBytes } from \"@noble/hashes/utils\";\nimport CryptoJS from \"crypto-js\";\nimport qs from \"qs\";\nimport mCache from \"memory-cache\";\nimport { safeParseJson } from \"@/utilities/common\";\n\nexport type SecureChannel = {\n  PrivateKey: string;\n  Message: string;\n  Encrypted: string;\n  ServerPublicKey: string;\n  ChannelID: string;\n  SecretKey: string;\n};\n\ninterface KeyPair {\n  privateKey: Uint8Array;\n  publicKey: Uint8Array;\n}\n\nconst AES_KEY_LENGTH = 32;\n\nexport async function createSecureChannel(config: {\n  API_WAAS_MYABCWALLET_URL: string;\n  MW_MYABCWALLET_URL: string;\n  CLIENT_ID: string;\n  CLIENT_SECRET: string;\n}): Promise<SecureChannel> {\n  try {\n    const keyPair = createKeypair();\n    const message = \"Bryan\";\n\n    const formData = qs.stringify({\n      pubkey: bytesToHex(keyPair.publicKey),\n      plain: message,\n    });\n\n    const response = await fetch(\n      `${config.API_WAAS_MYABCWALLET_URL}/secure/channel/create`,\n      {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n        body: formData,\n      }\n    );\n\n    if (!response.ok)\n      throw new Error(`Failed to create secure channel: ${response.status}`);\n    const responseData = await safeParseJson(response, \"createSecureChannel\");\n\n    const serverPubkey = hexToBytes(responseData.publickey);\n    const shared = p256.getSharedSecret(keyPair.privateKey, serverPubkey);\n    const sharedX = shared.slice(1, 33); // remove prefix (04)\n\n    const secretKey = bytesToHex(sharedX).padStart(64, \"0\");\n\n    const result: SecureChannel = {\n      ChannelID: responseData.channelid,\n      Encrypted: responseData.encrypted,\n      ServerPublicKey: responseData.publickey,\n      Message: message,\n      PrivateKey: bytesToHex(keyPair.privateKey),\n      SecretKey: secretKey,\n    };\n\n    mCache.put(\n      \"secureChannel\",\n      { data: responseData, keyPair, secretKey },\n      20 * 60 * 1000\n    );\n    sessionStorage.setItem(\"secureChannel\", JSON.stringify(result));\n\n    return result;\n  } catch (error: any) {\n    console.error(\"Create Secure Channel Error: \", error);\n    throw error;\n  }\n}\n\nfunction createKeypair(): KeyPair {\n  const privateKey = p256.utils.randomPrivateKey();\n  const publicKey = p256.getPublicKey(privateKey, false);\n  return { privateKey, publicKey };\n}\n\nexport function encrypt(channel: SecureChannel, message: string): string {\n  const { block, iv } = getAESCipher(\n    channel.PrivateKey,\n    channel.ServerPublicKey\n  );\n  const enc = CryptoJS.AES.encrypt(\n    CryptoJS.enc.Utf8.parse(message),\n    CryptoJS.enc.Hex.parse(block),\n    {\n      iv: CryptoJS.enc.Hex.parse(iv),\n      mode: CryptoJS.mode.CBC,\n      padding: CryptoJS.pad.Pkcs7,\n    }\n  );\n  return enc.toString();\n}\n\nexport function decrypt(channel: SecureChannel, encrypted: string): string {\n  const { block, iv } = getAESCipher(\n    channel.PrivateKey,\n    channel.ServerPublicKey\n  );\n  const dec = CryptoJS.AES.decrypt(encrypted, CryptoJS.enc.Hex.parse(block), {\n    iv: CryptoJS.enc.Hex.parse(iv),\n    mode: CryptoJS.mode.CBC,\n    padding: CryptoJS.pad.Pkcs7,\n  });\n  return dec.toString(CryptoJS.enc.Utf8);\n}\n\nexport function verifySecureChannel(channel: SecureChannel): boolean {\n  try {\n    const decrypted = decrypt(channel, channel.Encrypted);\n    return decrypted === channel.Message;\n  } catch (error: any) {\n    console.error(\"Secure Channel Verify Error: \", error);\n    return false;\n  }\n}\n\nfunction getAESCipher(privateKeyHex: string, publicKeyHex: string) {\n  const privateKey = hexToBytes(privateKeyHex);\n  const publicKey = hexToBytes(publicKeyHex);\n  const shared = p256.getSharedSecret(privateKey, publicKey);\n\n  const key = shared.slice(1, 17); // first 16 bytes\n  const iv = shared.slice(17, 33); // next 16 bytes\n  return { block: bytesToHex(key), iv: bytesToHex(iv) };\n}\n\nexport async function secureChannelScenario(config: {\n  API_WAAS_MYABCWALLET_URL: string;\n  MW_MYABCWALLET_URL: string;\n  CLIENT_ID: string;\n  CLIENT_SECRET: string;\n}) {\n  // Creating Secure Channel\n  const secureChannelRes: SecureChannel = await createSecureChannel(config);\n  console.log(\"Secure Channel Created: \", secureChannelRes);\n\n  // Verifying Secure Channel\n  const verifyResult: boolean = verifySecureChannel(secureChannelRes);\n  console.log(\"Secure Channel Verify Result: \", verifyResult); // expected to be true\n\n  // Encrypting and decrypting message using Secure Channel\n  const message: string = \"Hello, Bryan!\";\n  const encryptedMessage: string = encrypt(secureChannelRes, message);\n  const decryptedMessage: string = decrypt(secureChannelRes, encryptedMessage);\n\n  console.log(\"Message Encrypt Result: \", message === decryptedMessage); // expected to be true\n}\n\n/**\n * 랜덤 비밀번호 생성\n */\nexport const randomPassword = () => {\n  const chars =\n    \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  let password = \"\";\n  for (let i = 0; i < 8; i++) {\n    const randomIndex = Math.floor(Math.random() * chars.length);\n    password += chars[randomIndex];\n  }\n  return password;\n};\n\n/**\n * 암호화된 비밀번호 생성\n */\nexport const encryptedPassword = (secret: string) => {\n  // 32바이트 키를 생성한 후, 앞 16바이트만 AES 128비트 키로 사용\n  const key = CryptoJS.enc.Hex.parse(secret.substring(0, 32))\n    .toString(CryptoJS.enc.Hex)\n    .substring(0, 32); // 32자리 hex 중 앞의 16바이트만 사용\n  const iv = CryptoJS.enc.Hex.parse(secret.substring(AES_KEY_LENGTH)); // 나머지를 IV로 사용\n\n  // 암호화 수행\n  const encrypted = CryptoJS.AES.encrypt(\n    randomPassword(),\n    CryptoJS.enc.Hex.parse(key),\n    {\n      iv,\n      mode: CryptoJS.mode.CBC,\n      padding: CryptoJS.pad.Pkcs7,\n    }\n  );\n\n  // Base64 형식으로 변환\n  return encrypted.ciphertext.toString(CryptoJS.enc.Base64);\n};\n","// src/api/v2/auth.ts\n\nimport { AbcWaasConfig } from \"@/types/config\";\n\nexport async function postTokenLoginV2(\n  config: AbcWaasConfig,\n  basicToken: string,\n  token: string,\n  service: string\n) {\n  return fetch(\n    `${config.API_WAAS_MYABCWALLET_URL}/auth/auth-service/v2/token/login`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        Authorization: `Basic ${basicToken}`,\n      },\n      body: new URLSearchParams({\n        token,\n        service,\n        audience: config.MW_MYABCWALLET_URL,\n      }),\n    }\n  );\n}\n","// src/api/v2/member.ts\n\nimport { AbcWaasConfig } from \"@/types/config\";\n\nexport async function postMemberJoinV2(\n  config: AbcWaasConfig,\n  basicToken: string,\n  username: string,\n  code: string,\n  socialtype: string,\n  overage = \"1\",\n  agree = \"1\",\n  collect = \"1\",\n  thirdparty = \"1\",\n  advertise = \"1\"\n) {\n  return fetch(\n    `${config.API_WAAS_MYABCWALLET_URL}/member/user-management/v2/join`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        Authorization: `Basic ${basicToken}`,\n      },\n      body: new URLSearchParams({\n        username,\n        code,\n        serviceid: config.MW_MYABCWALLET_URL,\n        socialtype,\n        overage,\n        agree,\n        collect,\n        thirdparty,\n        advertise,\n      }),\n    }\n  );\n}\n","// src/api/v2/wallet.ts\n\nimport { AbcWaasConfig } from \"@/types/config\";\n\nexport async function getMpcWalletsInfoV2(\n  config: AbcWaasConfig,\n  accessToken: string\n) {\n  return fetch(`${config.API_WAAS_MYABCWALLET_URL}/wapi/v2/mpc/wallets/info`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      Authorization: `Bearer ${accessToken}`,\n    },\n  });\n}\n\nexport async function postMpcWalletsV2(\n  config: AbcWaasConfig,\n  accessToken: string,\n  email: string,\n  channelid: string,\n  devicePassword: string\n) {\n  return fetch(`${config.API_WAAS_MYABCWALLET_URL}/wapi/v2/mpc/wallets`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      Authorization: `Bearer ${accessToken}`,\n      \"Secure-Channel\": channelid,\n    },\n    body: new URLSearchParams({\n      email,\n      devicePassword,\n    }),\n  });\n}\n","// src/hooks/useSnsLogin.ts\n\nimport { useCallback, useState } from \"react\";\nimport { useAbcWaas } from \"@/hooks/useAbcWaas\";\nimport { createSecureChannel, encryptedPassword } from \"@/api/secureChannel\";\nimport { postTokenLoginV2 } from \"@/api/v2/auth\";\nimport { postMemberJoinV2 } from \"@/api/v2/member\";\nimport { getMpcWalletsInfoV2, postMpcWalletsV2 } from \"@/api/v2/wallet\";\nimport { safeParseJson } from \"@/utilities/common\";\n\nexport function useSnsLogin() {\n  const {\n    config,\n    basicToken,\n    email,\n    token,\n    service,\n    abcAuth,\n    abcWallet,\n    abcUser,\n    secureChannel,\n    setEmail,\n    setToken,\n    setService,\n    setBasicToken,\n    setAbcAuth,\n    setAbcWallet,\n    setAbcUser,\n    setSecureChannel,\n  } = useAbcWaas();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  const snsLoginV2 = useCallback(\n    async (email: string, token: string, service: string) => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        setEmail(email);\n        setToken(token);\n        setService(service);\n\n        const secureChannel = await createSecureChannel(config);\n        setSecureChannel(secureChannel);\n\n        const basicToken = btoa(`${config.CLIENT_ID}:${config.CLIENT_SECRET}`);\n        setBasicToken(basicToken);\n\n        const tryLogin = await postTokenLoginV2(\n          config,\n          basicToken,\n          token,\n          service\n        );\n\n        const tryLoginData = await tryLogin.json(); // { access_token, refresh_token, token_type, expires_in }\n\n        let accessToken = null;\n\n        if (tryLogin.ok) {\n          accessToken = tryLoginData.access_token;\n          setAbcAuth(tryLoginData);\n          sessionStorage.setItem(\"abcAuth\", JSON.stringify(tryLoginData));\n        }\n\n        if (tryLogin.status === 422 && tryLoginData.code === 618) {\n          const {\n            email,\n            sixcode,\n            token: newToken,\n          } = JSON.parse(tryLoginData.msg);\n\n          const joinRes = await postMemberJoinV2(\n            config,\n            basicToken,\n            email,\n            sixcode,\n            service\n          );\n          if (!joinRes?.ok) {\n            throw new Error(JSON.stringify(joinRes));\n          }\n\n          const retryLogin = await postTokenLoginV2(\n            config,\n            basicToken,\n            newToken,\n            service\n          );\n          const retryLoginData = await safeParseJson(\n            retryLogin,\n            \"postTokenLoginV2\"\n          ); // { access_token, refresh_token, token_type, expires_in }\n          if (!retryLogin.ok) {\n            throw new Error(JSON.stringify(retryLoginData));\n          }\n\n          accessToken = retryLoginData.access_token;\n          setAbcAuth(retryLoginData);\n          sessionStorage.setItem(\"abcAuth\", JSON.stringify(retryLoginData));\n        }\n\n        /*  */\n\n        const channelid = secureChannel.ChannelID;\n        const secretKey = secureChannel.SecretKey;\n\n        const devicePassword = encryptedPassword(secretKey);\n\n        const createMpcWallets = await postMpcWalletsV2(\n          config,\n          accessToken,\n          email,\n          channelid,\n          devicePassword\n        );\n\n        const createMpcWalletsData = await safeParseJson(\n          createMpcWallets,\n          \"postMpcWalletsV2\"\n        );\n        if (!createMpcWallets.ok) {\n          throw new Error(JSON.stringify(createMpcWalletsData));\n        }\n        if (\n          createMpcWalletsData.message ===\n          \"The token was expected to have 3 parts, but got 1.\"\n        ) {\n          throw new Error(JSON.stringify(createMpcWalletsData));\n        }\n\n        setAbcWallet(createMpcWalletsData);\n        sessionStorage.setItem(\n          \"abcWallet\",\n          JSON.stringify(createMpcWalletsData)\n        );\n\n        const mpcWalletsInfo = await getMpcWalletsInfoV2(config, accessToken);\n\n        const mpcWalletsInfoData = await safeParseJson(\n          mpcWalletsInfo,\n          \"getMpcWalletsInfoV2\"\n        );\n        if (!mpcWalletsInfo.ok) {\n          throw new Error(JSON.stringify(mpcWalletsInfoData));\n        }\n        if (\n          mpcWalletsInfoData.message ===\n          \"The token was expected to have 3 parts, but got 1.\"\n        ) {\n          throw new Error(JSON.stringify(mpcWalletsInfoData));\n        }\n        if (mpcWalletsInfoData.message === \"MPC KeyShare Recover Error\") {\n          throw new Error(JSON.stringify(mpcWalletsInfoData));\n        }\n        if (mpcWalletsInfoData.message === \"KeyShare generate failed.\") {\n          throw new Error(JSON.stringify(mpcWalletsInfoData));\n        }\n\n        setAbcUser(mpcWalletsInfoData);\n        sessionStorage.setItem(\"abcUser\", JSON.stringify(mpcWalletsInfoData));\n\n        return;\n      } catch (error: any) {\n        setError(error);\n        throw error;\n      } finally {\n        setLoading(false);\n      }\n    },\n    [config]\n  );\n\n  return {\n    basicToken,\n\n    email,\n    token,\n    service,\n\n    abcAuth,\n    abcWallet,\n    abcUser,\n    secureChannel,\n\n    snsLoginV2,\n    loading,\n    setLoading,\n    error,\n    setError,\n  };\n}\n"]}